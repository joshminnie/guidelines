{
    "docs": [
        {
            "location": "/", 
            "text": "Coding Guidelines\n\n\nThis covers the common coding guidelines and tools we use to projects, whether they be Ruby on Rails custom apps, WordPress development, etc. This is not all inclusive, but highlights the points that are the most commonly addressed.\n\n\nFeel free to use this as a starting point for your projects, or completely copy it.", 
            "title": "Home"
        }, 
        {
            "location": "/#coding-guidelines", 
            "text": "This covers the common coding guidelines and tools we use to projects, whether they be Ruby on Rails custom apps, WordPress development, etc. This is not all inclusive, but highlights the points that are the most commonly addressed.  Feel free to use this as a starting point for your projects, or completely copy it.", 
            "title": "Coding Guidelines"
        }, 
        {
            "location": "/guidelines/", 
            "text": "Stylesheet Guidelines\n\n\nBest practices and guidelines for writing HTML and CSS with approachable formatting, syntax, and more.\n\n\nHTML\n\n\nGeneral formatting\n\n\n\n\nUse soft-tabs with a two space indent. Spaces are the only way to guarantee code renders the same in any person\u2019s environment.\n\n\nParagraphs of text should always be placed in a \np\n tag. Never use multiple \nbr\n tags.\n\n\nItems in list form should always be in \nul\n, \nol\n, or \ndl\n. Never use a set of \ndiv\n or \np\n.\n\n\nEvery form input that has text attached should utilize a \nlabel\n tag. Especially radio or checkbox elements.\n\n\nEven though quotes around attributes is optional, always put quotes (\n\"\n) around attributes for readability.\n\n\nAvoid writing closing tag comments, like \n!-- /.element --\n. This just adds to page load time. Plus, most editors have indentation guides and open-close tag highlighting.\n\n\nAvoid trailing slashes in self-closing elements. For example, \nbr\n, \nhr\n, \nimg\n, and \ninput\n.\n\n\nDon\u2019t set \ntabindex\n manually \u2014 rely on the browser to set the order.\n\n\n\n\np class=\nline-note\n data-attribute=\n106\n\n  This is my paragraph of special text.\n\n/p\n\n\n\n\nBoolean attributes\n\n\nMany attributes don\u2019t require a value to be set, like disabled or checked, so don\u2019t set them.\n\n\ninput type=\ntext\n disabled\n\n\n\ninput type=\ncheckbox\n value=\n1\n checked\n\n\n\nselect\n\n  \noption value=\n1\n selected\n1\n/option\n\n\n/select\n\n\n\n\nFor more information, \nread the WhatWG section\n.\n\n\nLean markup\n\n\nWhenever possible, avoid superfluous parent elements when writing HTML. Many times this requires iteration and refactoring, but produces less HTML. For example:\n\n\n!-- Not so great --\n\n\nspan class=\navatar\n\n  \nimg src=\n...\n\n\n/span\n\n\n\n!-- Better --\n\n\nimg class=\navatar\n src=\n...\n\n\n\n\nForms\n\n\n\n\nLean towards radio or checkbox lists instead of select menus.\n\n\nWrap radio and checkbox inputs and their text in \nlabel\ns. No need for for attributes here \u2014 the wrapping automatically associates the two.\n\n\nForm buttons should always include an explicit \ntype\n. Use primary buttons for the \ntype=\"submit\"\n button and regular buttons for \ntype=\"button\"\n.\n\n\nThe primary form button must come first in the DOM, especially for forms with multiple submit buttons. The visual order should be preserved with \nfloat: right;\n on each button.\n\n\n\n\nTables\n\n\nMake use of \nthead\n, \ntfoot\n, \ntbody\n, and \nth\n tags (and \nscope\n attribute) when appropriate. (Note: \ntfoot\n goes above \ntbody\n for speed reasons. You want the browser to load the footer before a table full of data.)\n\n\ntable summary=\nThis is a chart of invoices for 2011.\n\n  \nthead\n\n    \ntr\n\n      \nth scope=\ncol\nTable header 1\n/th\n\n      \nth scope=\ncol\nTable header 2\n/th\n\n    \n/tr\n\n  \n/thead\n\n  \ntfoot\n\n    \ntr\n\n      \ntd\nTable footer 1\n/td\n\n      \ntd\nTable footer 2\n/td\n\n    \n/tr\n\n  \n/tfoot\n\n  \ntbody\n\n    \ntr\n\n      \ntd\nTable data 1\n/td\n\n      \ntd\nTable data 2\n/td\n\n    \n/tr\n\n  \n/tbody\n\n\n/table\n\n\n\n\nSCSS\n\n\nSpacing\n\n\n\n\nUse soft-tabs with a two space indent. Spaces are the only way to guarantee code renders the same in any person\u2019s environment.\n\n\nPut spaces after \n:\n in property declarations.\n\n\nPut spaces before \n{\n in rule declarations.\n\n\nPut line breaks between rulesets.\n\n\nWhen grouping selectors, keep individual selectors to a single line.\n\n\nPlace closing braces of declaration blocks on a new line.\n\n\nEach declaration should appear on its own line for more accurate error reporting.\n\n\n\n\nFormatting\n\n\n\n\nUse hex color codes \n#000\n unless using \nrgba()\n in raw CSS (SCSS\u2019 \nrgba()\n function is overloaded to accept hex colors as a param, e.g., \nrgba(#000, .5)\n).\n\n\nUse \n//\n for comment blocks (instead of \n/* */\n).\n\n\nAvoid specifying units for zero values, e.g., margin: 0; instead of margin: 0px;.\n\n\nStrive to limit use of shorthand declarations to instances where you must explicitly set all the available values.\n\n\n\n\nMisc\n\n\nAs a rule of thumb, avoid unnecessary nesting in SCSS. At most, aim for three levels. If you cannot help it, step back and rethink your overall strategy (either the specificity needed, or the layout of the nesting).\n\n\nExamples\n\n\nHere are some good examples that apply the above guidelines:\n\n\n// Example of good basic formatting practices\n.styleguide-format {\n  color: #000;\n  background-color: rgba(0, 0, 0, .5);\n  border: 1px solid #0f0;\n}\n\n// Example of individual selectors getting their own lines (for error reporting)\n.multiple,\n.classes,\n.get-new-lines {\n  display: block;\n}\n\n// Avoid unnecessary shorthand declarations\n.not-so-good {\n  margin: 0 0 20px;\n}\n.good {\n  margin-bottom: 20px;\n}\n\n\n\n\nFile organization\n\n\nComing soon\n\n\nPixels vs. ems\n\n\n\n\nUse \npx\n for \nfont-size\n, because it offers absolute control over text.\n\n\nUnit-less \nline-height\n is preferred because it does not inherit a percentage value of its parent element, but instead is based on a multiplier of the \nfont-size\n.\n\n\n\n\nClass naming conventions\n\n\nNever reference \njs-\n prefixed class names from CSS files. \njs-\n are used exclusively from JS files.\n\n\nSpecificity (classes vs. ids)\n\n\nElements that occur exactly once inside a page should use IDs, otherwise, use classes. When in doubt, use a class name.\n\n\n\n\nGood\n candidates for ids: header, footer, modal popups.\n\n\nBad\n candidates for ids: navigation, item listings, item view pages (ex: issue view).\n\n\n\n\nWhen styling a component, start with an element + class namespace (prefer class names over ids), prefer direct descendant selectors by default, and use as little specificity as possible. Here is a good example:\n\n\nul class=\ncategory-list\n\n  \nli class=\nitem\nCategory 1\n/li\n\n  \nli class=\nitem\nCategory 2\n/li\n\n  \nli class=\nitem\nCategory 3\n/li\n\n\n/ul\n\n\n\n\n.category-list { // element + class namespace\n\n  // Direct descendant selector \n for list items\n  \n li {\n    list-style-type: disc;\n  }\n\n  // Minimal specificity for all links\n  a {\n    color: #f00;\n  }\n}\n\n\n\n\nCSS Specificity guidelines\n\n\n\n\nIf you must use an id selector (\n#selector\n) make sure that you have no more than one in your rule declaration. A rule like \n#header .search #quicksearch { ... }\n is considered harmful.\n\n\nWhen modifying an existing element for a specific use, try to use specific class names. Instead of \n.listings-layout.bigge\nr use rules like \n.listings-layout.listings-bigger\n. Think about \nack/greping\n your code in the future.\n\n\nThe class names \ndisabled\n, \nmousedown\n, \ndanger\n, \nhover\n, \nselected\n, and \nactive\n should always be namespaced by a class (\nbutton.selected\n is a good example).", 
            "title": "Stylesheet Guidelines"
        }, 
        {
            "location": "/guidelines/#stylesheet-guidelines", 
            "text": "Best practices and guidelines for writing HTML and CSS with approachable formatting, syntax, and more.", 
            "title": "Stylesheet Guidelines"
        }, 
        {
            "location": "/guidelines/#html", 
            "text": "", 
            "title": "HTML"
        }, 
        {
            "location": "/guidelines/#general-formatting", 
            "text": "Use soft-tabs with a two space indent. Spaces are the only way to guarantee code renders the same in any person\u2019s environment.  Paragraphs of text should always be placed in a  p  tag. Never use multiple  br  tags.  Items in list form should always be in  ul ,  ol , or  dl . Never use a set of  div  or  p .  Every form input that has text attached should utilize a  label  tag. Especially radio or checkbox elements.  Even though quotes around attributes is optional, always put quotes ( \" ) around attributes for readability.  Avoid writing closing tag comments, like  !-- /.element -- . This just adds to page load time. Plus, most editors have indentation guides and open-close tag highlighting.  Avoid trailing slashes in self-closing elements. For example,  br ,  hr ,  img , and  input .  Don\u2019t set  tabindex  manually \u2014 rely on the browser to set the order.   p class= line-note  data-attribute= 106 \n  This is my paragraph of special text. /p", 
            "title": "General formatting"
        }, 
        {
            "location": "/guidelines/#boolean-attributes", 
            "text": "Many attributes don\u2019t require a value to be set, like disabled or checked, so don\u2019t set them.  input type= text  disabled  input type= checkbox  value= 1  checked  select \n   option value= 1  selected 1 /option  /select  For more information,  read the WhatWG section .", 
            "title": "Boolean attributes"
        }, 
        {
            "location": "/guidelines/#lean-markup", 
            "text": "Whenever possible, avoid superfluous parent elements when writing HTML. Many times this requires iteration and refactoring, but produces less HTML. For example:  !-- Not so great --  span class= avatar \n   img src= ...  /span  !-- Better --  img class= avatar  src= ...", 
            "title": "Lean markup"
        }, 
        {
            "location": "/guidelines/#forms", 
            "text": "Lean towards radio or checkbox lists instead of select menus.  Wrap radio and checkbox inputs and their text in  label s. No need for for attributes here \u2014 the wrapping automatically associates the two.  Form buttons should always include an explicit  type . Use primary buttons for the  type=\"submit\"  button and regular buttons for  type=\"button\" .  The primary form button must come first in the DOM, especially for forms with multiple submit buttons. The visual order should be preserved with  float: right;  on each button.", 
            "title": "Forms"
        }, 
        {
            "location": "/guidelines/#tables", 
            "text": "Make use of  thead ,  tfoot ,  tbody , and  th  tags (and  scope  attribute) when appropriate. (Note:  tfoot  goes above  tbody  for speed reasons. You want the browser to load the footer before a table full of data.)  table summary= This is a chart of invoices for 2011. \n   thead \n     tr \n       th scope= col Table header 1 /th \n       th scope= col Table header 2 /th \n     /tr \n   /thead \n   tfoot \n     tr \n       td Table footer 1 /td \n       td Table footer 2 /td \n     /tr \n   /tfoot \n   tbody \n     tr \n       td Table data 1 /td \n       td Table data 2 /td \n     /tr \n   /tbody  /table", 
            "title": "Tables"
        }, 
        {
            "location": "/guidelines/#scss", 
            "text": "", 
            "title": "SCSS"
        }, 
        {
            "location": "/guidelines/#spacing", 
            "text": "Use soft-tabs with a two space indent. Spaces are the only way to guarantee code renders the same in any person\u2019s environment.  Put spaces after  :  in property declarations.  Put spaces before  {  in rule declarations.  Put line breaks between rulesets.  When grouping selectors, keep individual selectors to a single line.  Place closing braces of declaration blocks on a new line.  Each declaration should appear on its own line for more accurate error reporting.", 
            "title": "Spacing"
        }, 
        {
            "location": "/guidelines/#formatting", 
            "text": "Use hex color codes  #000  unless using  rgba()  in raw CSS (SCSS\u2019  rgba()  function is overloaded to accept hex colors as a param, e.g.,  rgba(#000, .5) ).  Use  //  for comment blocks (instead of  /* */ ).  Avoid specifying units for zero values, e.g., margin: 0; instead of margin: 0px;.  Strive to limit use of shorthand declarations to instances where you must explicitly set all the available values.", 
            "title": "Formatting"
        }, 
        {
            "location": "/guidelines/#misc", 
            "text": "As a rule of thumb, avoid unnecessary nesting in SCSS. At most, aim for three levels. If you cannot help it, step back and rethink your overall strategy (either the specificity needed, or the layout of the nesting).", 
            "title": "Misc"
        }, 
        {
            "location": "/guidelines/#examples", 
            "text": "Here are some good examples that apply the above guidelines:  // Example of good basic formatting practices\n.styleguide-format {\n  color: #000;\n  background-color: rgba(0, 0, 0, .5);\n  border: 1px solid #0f0;\n}\n\n// Example of individual selectors getting their own lines (for error reporting)\n.multiple,\n.classes,\n.get-new-lines {\n  display: block;\n}\n\n// Avoid unnecessary shorthand declarations\n.not-so-good {\n  margin: 0 0 20px;\n}\n.good {\n  margin-bottom: 20px;\n}", 
            "title": "Examples"
        }, 
        {
            "location": "/guidelines/#file-organization", 
            "text": "Coming soon", 
            "title": "File organization"
        }, 
        {
            "location": "/guidelines/#pixels-vs-ems", 
            "text": "Use  px  for  font-size , because it offers absolute control over text.  Unit-less  line-height  is preferred because it does not inherit a percentage value of its parent element, but instead is based on a multiplier of the  font-size .", 
            "title": "Pixels vs. ems"
        }, 
        {
            "location": "/guidelines/#class-naming-conventions", 
            "text": "Never reference  js-  prefixed class names from CSS files.  js-  are used exclusively from JS files.", 
            "title": "Class naming conventions"
        }, 
        {
            "location": "/guidelines/#specificity-classes-vs-ids", 
            "text": "Elements that occur exactly once inside a page should use IDs, otherwise, use classes. When in doubt, use a class name.   Good  candidates for ids: header, footer, modal popups.  Bad  candidates for ids: navigation, item listings, item view pages (ex: issue view).   When styling a component, start with an element + class namespace (prefer class names over ids), prefer direct descendant selectors by default, and use as little specificity as possible. Here is a good example:  ul class= category-list \n   li class= item Category 1 /li \n   li class= item Category 2 /li \n   li class= item Category 3 /li  /ul  .category-list { // element + class namespace\n\n  // Direct descendant selector   for list items\n    li {\n    list-style-type: disc;\n  }\n\n  // Minimal specificity for all links\n  a {\n    color: #f00;\n  }\n}", 
            "title": "Specificity (classes vs. ids)"
        }, 
        {
            "location": "/guidelines/#css-specificity-guidelines", 
            "text": "If you must use an id selector ( #selector ) make sure that you have no more than one in your rule declaration. A rule like  #header .search #quicksearch { ... }  is considered harmful.  When modifying an existing element for a specific use, try to use specific class names. Instead of  .listings-layout.bigge r use rules like  .listings-layout.listings-bigger . Think about  ack/greping  your code in the future.  The class names  disabled ,  mousedown ,  danger ,  hover ,  selected , and  active  should always be namespaced by a class ( button.selected  is a good example).", 
            "title": "CSS Specificity guidelines"
        }
    ]
}